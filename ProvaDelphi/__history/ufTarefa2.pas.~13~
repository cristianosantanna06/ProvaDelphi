unit ufTarefa2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask;

type
  TfTarefa2 = class(TForm)
    ProgressBarThread1: TProgressBar;
    ProgressBarThread2: TProgressBar;
    ButtonIniciar: TButton;
    LabelProcesso1: TLabel;
    LabelProcesso2: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure ButtonIniciarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

  TThreadProgressBar1 = class(TThread)
  private
    FProgressBar : TProgressBar;
  protected
     procedure Execute;override;
  public
    property barra:TProgressBar read FProgressBar write FProgressBar;
    constructor Create(CreateSuspended: Boolean; pProgressbar: TProgressBar); overload;
  end;

var
  fTarefa2: TfTarefa2;



implementation

{$R *.dfm}

procedure TfTarefa2.ButtonIniciarClick(Sender: TObject);
var VThreadBarra1 : TThreadProgressBar1;
begin
  VThreadBarra1 := TThreadProgressBar1.Create(True, ProgressBarThread1);
  ProgressBarThread1.Position := VThreadBarra1.FProgressBar.Position;
  VThreadBarra1.Start;

//  VThreadBarra2 := VThreadBarra2.Create(False,ProgressBarThread2);
//  VThreadBarra1.Resume;
end;

procedure TfTarefa2.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Destroy;
end;


constructor TThreadProgressBar1.Create(CreateSuspended: Boolean;
  pProgressbar: TProgressBar);
begin
  inherited Create(CreateSuspended);
  Self.FProgressBar := pProgressbar;
  FreeOnTerminate := True;
end;

procedure TThreadProgressBar1.Execute;
var i : integer;
begin
  try
    inherited;
    FProgressBar := TProgressBar.Create(FProgressBar);
    FProgressBar.Min := 0;
    FProgressBar.Position := 0;
    FProgressBar.max := 100;
    if not Terminated then
    begin
      for I := 0 to 100 do
      begin
        FProgressBar.Position := i;
      end;
    end;
    Self.FProgressBar.Repaint;
  finally
//    self.Terminate;
//    self.free;
  end;

end;

end.
